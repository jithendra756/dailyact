https://leetcode.com/problems/permutations-ii/submissions/1186977048

class Solution {
    public static void pp(int[] nums,List<List<Integer>> ans,List<Integer> ds,boolean[] map)
    {
        if(ds.size()==nums.length)
        {
            ans.add(new ArrayList<>(ds));
            return;
        }
        for(int i=0;i<nums.length;i++)
        {
            if(!map[i])
            {
                map[i]=true;
                ds.add(nums[i]);
                pp(nums,ans,ds,map);
                ds.remove(ds.size()-1);
                map[i]=false;
            }
        }
    }
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        boolean[] map=new boolean[nums.length];
        pp(nums,ans,new ArrayList<Integer>(),map);
        HashMap<List<Integer>,Integer> hm = new HashMap<>();
        for(List<Integer> i:ans)
        {
            if(hm.containsKey(i))
            {}
            else
            {
                hm.put(i,0);
            }
        }
        List<List<Integer>> ans1 = new ArrayList<>();
        for(Map.Entry<List<Integer>,Integer> entry : hm.entrySet())
        {
            ans1.add(entry.getKey());
        }
        return ans1;
    }
}
